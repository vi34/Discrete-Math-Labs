package ${name}
public class ${name}Lexer {
    InputStream is;
    int curChar;
    int curPos;
    Token curToken;

    public ${name}Lexer (InputStream is) throws ParseException {
        this.is = is;
        curPos = 0;
        nextChar();
    }

    private boolean isSkipped (int c) {
        return <% print tokens.findAll{it.skip}.collect { t ->
                            t.literals.collect{ lit -> "c == '$lit'"}.join(" || ")}.join(" || ")%>;
    }

    private void nextChar() throws ParseException {
        curPos++;
        try {
            curChar = is.read();
        } catch (IOException e) {
            throw new ParseException (e.getMessage(), curPos);
        }
    }

    public void nextToken() throws ParseException {
        while (isSkipped(curChar)) {
            nextChar();
        }
        switch (curChar) {
            <% tokens.findAll{!it.skip}.each { t-> %>
            <% t.getSymbols().each {symb -> %> case '${symb.charAt(0)}': <%}%>
                nextChar();
                curToken = Token.${t.name};
                break;  <% } %>
            case -1:
                curToken = Token.END;
                break;
            default :
                throw new ParseException ("Illegal character: " + (char)curChar, curPos);
        }
    }

    public Token curToken() {
        return curToken;
    }

}