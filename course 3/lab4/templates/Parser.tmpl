package ${name};
import java.io.InputStream;
import java.text.ParseException;
import vi34.lib.Parser;
${header}

public class ${name}Parser implements Parser {
    ${name}Lexer lex;

    //user members:
    ${members}
    //


    <% nonTerms.eachWithIndex { nt, ind1 -> %>private ${name}Tree ${nt.name}() throws ParseException {
        ${name}Tree node = new ${name}Tree("${nt.name}");
        switch (lex.curToken) {<% nt.ruleFirst.eachWithIndex { set, ind -> if (set.count{t-> t.name.equals("EPS")} == 0) {%>
            <% set.each { el-> %>case ${el.name}:<% } %>
                <%nt.rules.get(ind).collect{rules.get(it)}.each{ symb ->
                    if (symb instanceof Terminal) { %>
                        String ${symb.name.toLowerCase()}S = lex.curToken.toString();
                        lex.nextToken();
                        node.addChild(new ${name}Tree(${symb.name.toLowerCase()}S)); <% } else { %>
                        node.addChild(${symb.name}()); <% } %>
               <% } %> break;
        <% }} %>
        <% if (nt.ruleFirst.find{it.count{t-> t.name.equals("EPS")} != 0}) {%>
            <%nt.follow.each { follow -> %>case $follow:<% }%>
                node.addChild(new ${name}Tree("EPS"));
                break;
        <% }%>
            default:
                throw new ParseException("found: " + lex.curToken + " pos: " + (lex.curPos - 1), lex.curPos);
        }
        return node;
    }
    <% } %>

    public ${name}Tree parse(InputStream is) throws ParseException {
        lex = new ${name}Lexer(is);
        lex.nextToken();

        ${name}Tree $start = $start();
        if (lex.curToken == Token.END)
            return $start;
        else
            throw new ParseException("expected end of expression, found: " + lex.curToken + " pos:" + (lex.curPos - 1), lex.curPos);
    }
}
