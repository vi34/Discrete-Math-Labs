package ${name};
import java.io.InputStream;
import java.text.ParseException;
import vi34.lib.Parser;
${header}

public class ${name}Parser implements Parser {
    ${name}Lexer lex;

    //user members:
    ${members}
    //

    <% nonTerms.eachWithIndex { nt, ind1 -> %>
    private class Tree_${nt.name} extends ${name}Tree {
        Tree_${nt.name}(String node) {
            super(node);
        }
        ${nt.ret}
    }

    private Tree_${nt.name} ${nt.name}(${nt.arg}) throws ParseException {
        Tree_${nt.name} node = new Tree_${nt.name}("${nt.name}");
        <%Set distinct = [];
         nt.rules.each{r -> r.each{distinct.add(it)}};
         distinct.collect{r -> rules.get(r)}.findAll{it instanceof Terminal || it instanceof NonTerminal}.each{symb -> %>

         String ${symb.name.toLowerCase()}S;
         <%= (symb instanceof Terminal) ? "${name}Tree" : "Tree_${symb.name}"%> ${symb.name.toLowerCase()}T;
         <%}%>
        switch (lex.curToken) {<% nt.ruleFirst.eachWithIndex { set, ind -> if (set.count{t-> t.name.equals("EPS")} == 0) {%>
            <% set.each { el-> %>case ${el.name}:<% } %>
                <%nt.rules.get(ind).collect{rules.get(it)}.eachWithIndex{ symb, ind2 ->
                    def sname = symb.name.toLowerCase();
                    if (symb instanceof Terminal) { %>
                        ${sname}S = lex.curToken.toString();
                        lex.nextToken();
                        ${sname}T = new ${name}Tree(${sname}S);
                        node.addChild(${sname}T);
                        <% } else if (symb instanceof NonTerminal) { %>
                        ${sname}T = ${sname}(${nt.rInputs.get(ind).get(ind2)});
                        node.addChild(${sname}T);
                        <% } else { %> ${symb.actions} <% }%>
               <% } %> break;
        <% }} %>
        <% if (nt.ruleFirst.find{it.count{t-> t.name.equals("EPS")} != 0}) {%>
            <%nt.follow.each { follow -> %>case $follow:<% }%>
                node.addChild(new ${name}Tree("EPS"));
                <% nt.ruleFirst.eachWithIndex {set, ind->  if (set.find{t-> t.name.equals("EPS")}) {
                 nt.rules.get(ind).collect{rules.get(it)}.eachWithIndex{ symb, ind2 -> %>
                 ${symb.actions}
                 <% } } } %>
                break;
        <% }%>
            default:
                throw new ParseException("found: " + lex.curToken + " pos: " + (lex.curPos - 1), lex.curPos);
        }
        return node;
    }
    <% } %>

    public ${name}Tree parse(InputStream is) throws ParseException {
        lex = new ${name}Lexer(is);
        lex.nextToken();

        ${name}Tree $start = $start();
        if (lex.curToken == Token.END)
            return $start;
        else
            throw new ParseException("expected end of expression, found: " + lex.curToken + " pos:" + (lex.curPos - 1), lex.curPos);
    }
}
